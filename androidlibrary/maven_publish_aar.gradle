apply plugin: 'maven-publish'

def isReleaseBuild() {
    return version.contains("snapshots") == false
}

def getRepositoryUrl(Properties props) {
    if (isReleaseBuild()) {
        return getReleaseRepositoryUrl(props)
    } else {
        return getSnapshotRepositoryUrl(props)
    }
}

def getReleaseRepositoryUrl(Properties props) {
    if (hasProperty('RELEASE_REPOSITORY_URL')) {
        return RELEASE_REPOSITORY_URL
    } else if (props['RELEASE_REPOSITORY_URL'] != null) {
        return props['RELEASE_REPOSITORY_URL']
    } else {
        return "http://xxx/"
    }
}

def getSnapshotRepositoryUrl(Properties props) {
    if (hasProperty('SNAPSHOT_REPOSITORY_URL')) {
        return RELEASE_REPOSITORY_URL
    } else if (props['SNAPSHOT_REPOSITORY_URL'] != null) {
        return props['SNAPSHOT_REPOSITORY_URL']
    } else {
        return "http://xxx/"
    }
}

def getRepositoryUsername(Properties props) {
    try {
        return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : props['NEXUS_USERNAME']
    } catch (Exception ignored) {
        println("需要在root project的local.properties 声明 NEXUS_USERNAME=你的账号")
        return ""
    }
}

def getRepositoryPassword(Properties props) {
    try {
        return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : props['NEXUS_PASSWORD']
    } catch (Exception ignored) {
        println("需要在root project的local.properties 声明 NEXUS_PASSWORD=你的密码")
        return ""
    }
}

def GROUP_ID = 'com.example.MyLibrary'
def ARTIFACT_ID = 'final'
def VERSION = '1.0'

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = VERSION
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = VERSION
            }
        }

        repositories {
            maven {
                def props = new Properties()
                rootProject.file('local.properties').withInputStream { props.load(it) }
                //上传到本地仓库
                url = uri('../repo')
                ///上传到远程仓库
//                url = getRepositoryUrl(props)
//                allowInsecureProtocol true
//                credentials {
//                    username getRepositoryUsername(props)
//                    password getRepositoryPassword(props)
//                }
//                credentials {
//                    username getRepositoryUsername(props)
//                    password getRepositoryPassword(props)
//                }
            }
        }
    }
}